```python
class MyCircularQueue():

    def __init__(self, k):
        """
        Initialize your data structure here. Set the size of the queue to be k.
        :type k: int
        """
        self.a = [0]*k
        self.head = 0
        self.tail = 0
        self.max_size = k
        self.size = 0
        

    def enQueue(self, value):
        """
        Insert an element into the circular queue. Return true if the operation is successful.
        :type value: int
        :rtype: bool
        """
        if self.size == self.max_size:
            return False
        self.a[self.tail] = value
        self.tail += 1
        self.tail %= self.max_size
        self.size += 1
        return True
        

    def deQueue(self):
        """
        Delete an element from the circular queue. Return true if the operation is successful.
        :rtype: bool
        """
        if self.size == 0:
            return False
        self.head += 1
        self.head %= self.max_size
        self.size -= 1
        return True
        

    def Front(self):
        """
        Get the front item from the queue.
        :rtype: int
        """
        if self.size == 0:
            return -1
        return self.a[self.head]

    def Rear(self):
        """
        Get the last item from the queue.
        :rtype: int
        """
        
        if self.size == 0:
            return -1
        cur = self.tail
        cur -= 1
        cur = (cur + self.max_size)%self.max_size
        return self.a[cur]
        
        

    def isEmpty(self):
        """
        Checks whether the circular queue is empty or not.
        :rtype: bool
        """
        return self.size == 0
        

    def isFull(self):
        """
        Checks whether the circular queue is full or not.
        :rtype: bool
        """
        return self.size == self.max_size
        


# Your MyCircularQueue object will be instantiated and called as such:
# obj = MyCircularQueue(k)
# param_1 = obj.enQueue(value)
# param_2 = obj.deQueue()
# param_3 = obj.Front()
# param_4 = obj.Rear()
# param_5 = obj.isEmpty()
# param_6 = obj.isFull()

```
